{
	// Place your DSA WITH CPP workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"": {
  "prefix": "BST",
  "body": [
    "#include <iostream>",
    "#include <queue>",
    "using namespace std;",
    "class node",
    "{",
    "public:",
    "    int data;",
    "    node *left;",
    "    node *right;",
    "    node(int data)",
    "    {",
    "        this->data = data;",
    "        this->left = NULL;",
    "        this->right = NULL;",
    "    }",
    "};",
    "node *BuildBST(node *&root, int data)",
    "{",
    "    if (root == NULL)",
    "    {",
    "        root = new node(data);",
    "        return root;",
    "    }",
    "    if (data < root->data)",
    "    {",
    "        root->left = BuildBST(root->left, data);",
    "    }",
    "    else",
    "    {",
    "        root->right = BuildBST(root->right, data);",
    "    }",
    "    return root;",
    "}",
    "void takeinput(node *&root)",
    "{",
    "    int data;",
    "    cin >> data;",
    "    while (data != -1)",
    "    {",
    "        BuildBST(root, data);",
    "        cin >> data;",
    "    }",
    "}"
  ],
  "description": ""
}
}